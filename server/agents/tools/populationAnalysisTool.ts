import { BaseTool } from './baseTool.js';
import { ToolResult, ToolInput } from '../types.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface PopulationData {
  year: number;
  total_population: number;
  male_population: number;
  female_population: number;
  age_groups: {
    [ageGroup: string]: {
      total: number;
      male: number;
      female: number;
    };
  };
}

interface PopulationDataset {
  [year: string]: any;
}

export class PopulationAnalysisTool extends BaseTool {
  name = 'population_analysis';
  description = 'N√ºfus verilerini analiz eder ve il bazƒ±nda demografik bilgiler saƒülar';
  
  private populationData: PopulationDataset | null = null;

  constructor() {
    super();
    this.loadPopulationData();
  }

  private loadPopulationData(): void {
    try {
      // Tam veriyi y√ºkle (cinsiyet ve ya≈ü verileri ile)
      // Production ortamƒ±nda dosya yolu sorunlarƒ± i√ßin farklƒ± yollar dene
      const possiblePaths = [
        path.join(process.cwd(), 'nufus_verileri.json'),
        path.join(__dirname, '../../../nufus_verileri.json'),
        path.join(__dirname, '../../../../nufus_verileri.json'),
        path.join(__dirname, '../../../../../nufus_verileri.json'),
        './nufus_verileri.json',
        '/app/nufus_verileri.json', // Docker container path
        path.join(process.cwd(), '..', 'nufus_verileri.json'),
        path.join(process.cwd(), '..', '..', 'nufus_verileri.json')
      ];
      
      console.log('üîç N√ºfus verileri dosyasƒ± aranƒ±yor...');
      console.log('Current working directory:', process.cwd());
      console.log('__dirname:', __dirname);
      
      let dataPath = null;
      for (const testPath of possiblePaths) {
        console.log(`Denenen yol: ${testPath}`);
        if (fs.existsSync(testPath)) {
          dataPath = testPath;
          console.log(`‚úÖ N√ºfus verileri dosyasƒ± bulundu: ${testPath}`);
          break;
        }
      }
      
      if (!dataPath) {
        console.error('‚ùå Hi√ßbir yolda n√ºfus verileri dosyasƒ± bulunamadƒ±');
        console.error('Denenen yollar:', possiblePaths);
        throw new Error(`N√ºfus verileri dosyasƒ± bulunamadƒ±. Denenen yollar: ${possiblePaths.join(', ')}`);
      }
      
      const rawData = fs.readFileSync(dataPath, 'utf-8');
      this.populationData = JSON.parse(rawData);
      console.log('‚úÖ N√ºfus verileri y√ºklendi (cinsiyet ve ya≈ü verileri ile)');
      console.log(`üìä Toplam ${Object.keys(this.populationData?.['2024'] || {}).length} il verisi y√ºklendi`);
    } catch (error) {
      console.error('‚ùå N√ºfus verileri y√ºklenemedi:', error);
      this.populationData = null;
    }
  }

  async execute(input: ToolInput): Promise<ToolResult | null> {
    if (!this.populationData) {
      return this.createResult(
        'population_analysis',
        { error: 'N√ºfus verileri y√ºklenemedi' },
        0
      );
    }

    try {
      const analysis = this.analyzePopulationQuery(input.query);
      return this.createResult(
        'population_analysis',
        analysis,
        0.9
      );
    } catch (error) {
      console.error('N√ºfus analizi hatasƒ±:', error);
      return this.createResult(
        'population_analysis',
        { error: 'N√ºfus analizi yapƒ±lamadƒ±' },
        0
      );
    }
  }

  private analyzePopulationQuery(query: string): any {
    const lowerQuery = query.toLowerCase();
    
    // ƒ∞l ismini √ßƒ±kar
    const province = this.extractProvinceFromQuery(query);
    if (!province) {
      return this.getGeneralPopulationInfo();
    }

    // ƒ∞l bazƒ±nda analiz
    const provinceData = this.getProvinceData(province);
    if (!provinceData) {
      return { error: `${province} ili i√ßin veri bulunamadƒ±` };
    }

    // Analiz t√ºr√ºn√º belirle
    if (lowerQuery.includes('gen√ß') || lowerQuery.includes('ya≈ü') || lowerQuery.includes('demografik')) {
      return this.analyzeAgeDistribution(province, provinceData);
    }
    
    if (lowerQuery.includes('cinsiyet') || lowerQuery.includes('erkek') || lowerQuery.includes('kadƒ±n')) {
      return this.analyzeGenderDistribution(province, provinceData);
    }
    
    if (lowerQuery.includes('trend') || lowerQuery.includes('deƒüi≈üim') || lowerQuery.includes('artƒ±≈ü') || lowerQuery.includes('azalƒ±≈ü')) {
      return this.analyzePopulationTrends(province);
    }

    // Genel il bilgisi
    return this.getProvinceOverview(province, provinceData);
  }

  private extractProvinceFromQuery(query: string): string | null {
    const metadata = this.populationData!.metadata as any;
    const provinces = metadata?.provinces || [];
    
    for (const province of provinces) {
      if (query.toLowerCase().includes(province.toLowerCase())) {
        return province;
      }
    }
    
    return null;
  }

  private getProvinceData(province: string): PopulationData | null {
    const data2024 = this.populationData!['2024'][province];
    return data2024 || null;
  }

  private getGeneralPopulationInfo(): any {
    const data2024 = this.populationData!['2024'] as any;
    const totalPopulation = Object.values(data2024).reduce((sum: number, province: any) => sum + province.total_population, 0);
    const metadata = this.populationData!.metadata as any;
    
    return {
      type: 'general_info',
      total_population: totalPopulation,
      total_provinces: metadata?.total_provinces || 0,
      message: `T√ºrkiye genelinde 2024 yƒ±lƒ±nda toplam ${totalPopulation.toLocaleString('tr-TR')} ki≈üi ya≈üamaktadƒ±r.`
    };
  }

  private getProvinceOverview(province: string, data: PopulationData): any {
    const maleRatio = (data.male_population / data.total_population * 100).toFixed(1);
    const femaleRatio = (data.female_population / data.total_population * 100).toFixed(1);
    
    return {
      type: 'province_overview',
      province: province,
      year: data.year,
      total_population: data.total_population,
      male_population: data.male_population,
      female_population: data.female_population,
      male_ratio: parseFloat(maleRatio),
      female_ratio: parseFloat(femaleRatio),
      message: `${province} ilinde 2024 yƒ±lƒ±nda toplam ${data.total_population.toLocaleString('tr-TR')} ki≈üi ya≈üamaktadƒ±r. N√ºfusun %${maleRatio}'i erkek, %${femaleRatio}'i kadƒ±ndƒ±r.`
    };
  }

  private analyzeAgeDistribution(province: string, data: PopulationData): any {
    const ageGroups = data.age_groups;
    
    // Gen√ß n√ºfus (0-24)
    const youngPopulation = this.calculateAgeGroupTotal(ageGroups, ['0-4', '5-9', '10-14', '15-19', '20-24']);
    const youngRatio = (youngPopulation / data.total_population * 100).toFixed(1);
    
    // Orta ya≈ü n√ºfus (25-54)
    const middleAgePopulation = this.calculateAgeGroupTotal(ageGroups, ['25-29', '30-34', '35-39', '40-44', '45-49', '50-54']);
    const middleAgeRatio = (middleAgePopulation / data.total_population * 100).toFixed(1);
    
    // Ya≈ülƒ± n√ºfus (55+)
    const elderlyPopulation = this.calculateAgeGroupTotal(ageGroups, ['55-59', '60-64', '65-69', '70-74', '75-79', '80-84', '85-89', '90+']);
    const elderlyRatio = (elderlyPopulation / data.total_population * 100).toFixed(1);
    
    return {
      type: 'age_distribution',
      province: province,
      year: data.year,
      young_population: youngPopulation,
      young_ratio: parseFloat(youngRatio),
      middle_age_population: middleAgePopulation,
      middle_age_ratio: parseFloat(middleAgeRatio),
      elderly_population: elderlyPopulation,
      elderly_ratio: parseFloat(elderlyRatio),
      message: `${province} ilinde ya≈ü daƒüƒ±lƒ±mƒ±: Gen√ß n√ºfus (0-24 ya≈ü) %${youngRatio}, Orta ya≈ü n√ºfus (25-54 ya≈ü) %${middleAgeRatio}, Ya≈ülƒ± n√ºfus (55+ ya≈ü) %${elderlyRatio}`
    };
  }

  private analyzeGenderDistribution(province: string, data: PopulationData): any {
    const maleRatio = (data.male_population / data.total_population * 100).toFixed(1);
    const femaleRatio = (data.female_population / data.total_population * 100).toFixed(1);
    
    return {
      type: 'gender_distribution',
      province: province,
      year: data.year,
      male_population: data.male_population,
      female_population: data.female_population,
      male_ratio: parseFloat(maleRatio),
      female_ratio: parseFloat(femaleRatio),
      message: `${province} ilinde cinsiyet daƒüƒ±lƒ±mƒ±: Erkek n√ºfus %${maleRatio} (${data.male_population.toLocaleString('tr-TR')} ki≈üi), Kadƒ±n n√ºfus %${femaleRatio} (${data.female_population.toLocaleString('tr-TR')} ki≈üi)`
    };
  }

  private analyzePopulationTrends(province: string): any {
    const data2024 = this.populationData!['2024'][province];
    const data2023 = this.populationData!['2023'][province];
    
    if (!data2024 || !data2023) {
      return { error: `${province} ili i√ßin trend analizi yapƒ±lamadƒ±` };
    }
    
    const populationChange = data2024.total_population - data2023.total_population;
    const changeRatio = (populationChange / data2023.total_population * 100).toFixed(2);
    
    // Gen√ß n√ºfus deƒüi≈üimi
    const young2024 = this.calculateAgeGroupTotal(data2024.age_groups, ['0-4', '5-9', '10-14', '15-19', '20-24']);
    const young2023 = this.calculateAgeGroupTotal(data2023.age_groups, ['0-4', '5-9', '10-14', '15-19', '20-24']);
    const youngChange = young2024 - young2023;
    const youngChangeRatio = (youngChange / young2023 * 100).toFixed(2);
    
    let trendMessage = `${province} ilinde 2023-2024 arasƒ± toplam n√ºfus ${populationChange > 0 ? 'artƒ±≈ü' : 'azalƒ±≈ü'} g√∂sterdi (${changeRatio}%). `;
    
    if (Math.abs(parseFloat(youngChangeRatio)) > 1) {
      trendMessage += `Gen√ß n√ºfus oranƒ± ${parseFloat(youngChangeRatio) > 0 ? 'artƒ±≈ü' : 'azalƒ±≈ü'} g√∂sterdi (${youngChangeRatio}%).`;
    }
    
    return {
      type: 'population_trends',
      province: province,
      population_change: populationChange,
      population_change_ratio: parseFloat(changeRatio),
      young_population_change: youngChange,
      young_population_change_ratio: parseFloat(youngChangeRatio),
      message: trendMessage
    };
  }

  private calculateAgeGroupTotal(ageGroups: any, targetGroups: string[]): number {
    return targetGroups.reduce((total, group) => {
      return total + (ageGroups[group]?.total || 0);
    }, 0);
  }

  // Harita ve grafik i√ßin veri saƒülama metodlarƒ±
  getMapData(): any {
    if (!this.populationData) return null;
    
    const data2024 = this.populationData['2024'];
    
    // 2023 verilerini trend dosyasƒ±ndan al
    let data2023 = null;
    try {
      const possibleTrendPaths = [
        path.join(process.cwd(), 'nufus_trend_verileri.json'),
        path.join(__dirname, '../../../nufus_trend_verileri.json'),
        path.join(__dirname, '../../../../nufus_trend_verileri.json'),
        path.join(__dirname, '../../../../../nufus_trend_verileri.json'),
        './nufus_trend_verileri.json',
        '/app/nufus_trend_verileri.json', // Docker container path
        path.join(process.cwd(), '..', 'nufus_trend_verileri.json'),
        path.join(process.cwd(), '..', '..', 'nufus_trend_verileri.json')
      ];
      
      console.log('üîç Trend verileri dosyasƒ± aranƒ±yor...');
      let trendDataPath = null;
      for (const testPath of possibleTrendPaths) {
        console.log(`Trend dosyasƒ± denenen yol: ${testPath}`);
        if (fs.existsSync(testPath)) {
          trendDataPath = testPath;
          console.log(`‚úÖ Trend verileri dosyasƒ± bulundu: ${testPath}`);
          break;
        }
      }
      
      if (trendDataPath) {
        const trendRawData = fs.readFileSync(trendDataPath, 'utf-8');
        const trendData = JSON.parse(trendRawData);
        data2023 = trendData['2023'];
        console.log('‚úÖ 2023 trend verileri y√ºklendi');
      } else {
        console.warn('‚ö†Ô∏è Trend verileri dosyasƒ± bulunamadƒ±, sadece 2024 verileri kullanƒ±lacak');
      }
    } catch (error) {
      console.error('‚ùå Trend verileri y√ºklenemedi:', error);
    }
    
    return Object.entries(data2024).map(([province, data]: [string, any]) => {
      const currentPopulation = data.total_population;
      const previousPopulation = data2023?.[province]?.total_population;
      
      // N√ºfus deƒüi≈üimini hesapla
      let populationChange = 0;
      let changePercentage = 0;
      let trend = 'stable';
      
      if (previousPopulation && previousPopulation > 0) {
        populationChange = currentPopulation - previousPopulation;
        changePercentage = (populationChange / previousPopulation * 100);
        trend = populationChange > 0 ? 'up' : populationChange < 0 ? 'down' : 'stable';
      }
      
      return {
        province,
        total_population: currentPopulation,
        male_population: data.male_population || 0,
        female_population: data.female_population || 0,
        male_ratio: currentPopulation > 0 ? ((data.male_population || 0) / currentPopulation * 100).toFixed(1) : '0.0',
        female_ratio: currentPopulation > 0 ? ((data.female_population || 0) / currentPopulation * 100).toFixed(1) : '0.0',
        population_change: populationChange,
        change_percentage: changePercentage,
        trend: trend
      };
    });
  }

  getAgeDistributionData(province?: string): any {
    if (!this.populationData) return null;
    
    if (province) {
      const data2024 = this.populationData['2024'][province];
      const data2023 = this.populationData['2023'][province];
      
      if (!data2024 || !data2023) return null;
      
      return {
        province,
        years: {
          2023: this.formatAgeData(data2023),
          2024: this.formatAgeData(data2024)
        }
      };
    }
    
    // T√ºm iller i√ßin genel ya≈ü daƒüƒ±lƒ±mƒ±
    const data2024 = this.populationData['2024'];
    const totalAgeGroups: { [key: string]: number } = {};
    
    Object.values(data2024).forEach((provinceData: any) => {
      if (provinceData.age_groups) {
        Object.entries(provinceData.age_groups).forEach(([ageGroup, data]: [string, any]) => {
          totalAgeGroups[ageGroup] = (totalAgeGroups[ageGroup] || 0) + data.total;
        });
      }
    });
    
    return {
      type: 'national',
      years: {
        2024: this.formatAgeDataFromGroups(totalAgeGroups)
      }
    };
  }

  private formatAgeData(data: PopulationData): any {
    if (!data.age_groups) {
      return [];
    }
    return Object.entries(data.age_groups).map(([ageGroup, groupData]: [string, any]) => ({
      ageGroup,
      total: groupData.total,
      male: groupData.male,
      female: groupData.female
    }));
  }

  private formatAgeDataFromGroups(ageGroups: { [key: string]: number }): any {
    return Object.entries(ageGroups).map(([ageGroup, total]) => ({
      ageGroup,
      total,
      male: 0, // Bu veri mevcut deƒüil
      female: 0 // Bu veri mevcut deƒüil
    }));
  }

  // N√ºfus trend verisi saƒülama metodu (son 10 yƒ±l)
  getPopulationTrendData(province: string): any {
    try {
      // Trend verilerini ayrƒ± dosyadan y√ºkle
      const possibleTrendPaths = [
        path.join(process.cwd(), 'nufus_trend_verileri.json'),
        path.join(__dirname, '../../../nufus_trend_verileri.json'),
        path.join(__dirname, '../../../../nufus_trend_verileri.json'),
        path.join(__dirname, '../../../../../nufus_trend_verileri.json'),
        './nufus_trend_verileri.json',
        '/app/nufus_trend_verileri.json', // Docker container path
        path.join(process.cwd(), '..', 'nufus_trend_verileri.json'),
        path.join(process.cwd(), '..', '..', 'nufus_trend_verileri.json')
      ];
      
      console.log(`üîç ${province} ili i√ßin trend verileri aranƒ±yor...`);
      let trendDataPath = null;
      for (const testPath of possibleTrendPaths) {
        console.log(`Trend dosyasƒ± denenen yol: ${testPath}`);
        if (fs.existsSync(testPath)) {
          trendDataPath = testPath;
          console.log(`‚úÖ Trend verileri dosyasƒ± bulundu: ${testPath}`);
          break;
        }
      }
      
      if (trendDataPath) {
        const trendRawData = fs.readFileSync(trendDataPath, 'utf-8');
        const trendData = JSON.parse(trendRawData);
        
        const result = [];
        const years = ['2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024'];
        
        for (const year of years) {
          const yearData = trendData[year];
          if (yearData && yearData[province]) {
            const provinceData = yearData[province];
            result.push({
              year: parseInt(year),
              n√ºfus: provinceData.total_population,
              n√ºfus_milyon: (provinceData.total_population / 1000000).toFixed(2)
            });
          }
        }
        
        console.log(`‚úÖ ${province} ili i√ßin ${result.length} yƒ±llƒ±k trend verisi bulundu`);
        return result.sort((a, b) => a.year - b.year);
      } else {
        console.warn(`‚ö†Ô∏è ${province} ili i√ßin trend verileri dosyasƒ± bulunamadƒ±`);
      }
    } catch (error) {
      console.error('‚ùå Trend verileri y√ºklenemedi:', error);
    }
    
    return null;
  }
}
