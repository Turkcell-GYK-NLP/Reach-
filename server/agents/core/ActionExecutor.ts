import { UserContext, ToolResult } from '../types.js';
import { ToolRegistry } from './ToolRegistry.js';
import { ReasoningStep } from './ReasoningEngine.js';

export interface ActionPlan {
  actionType: 'tool_execution' | 'fallback' | 'web_search' | 'static_data';
  toolName?: string;
  parameters?: any;
  priority: number;
  expectedResult: string;
}

export interface ExecutionResult {
  success: boolean;
  results: ToolResult[];
  error?: string;
  executionTime: number;
  fallbackUsed: boolean;
}

export class ActionExecutor {
  private toolRegistry: ToolRegistry;
  private executionHistory: Map<string, ExecutionResult[]> = new Map();

  constructor(toolRegistry: ToolRegistry) {
    this.toolRegistry = toolRegistry;
  }

  /**
   * ReAct Pattern Action Execution
   */
  async executeAction(
    action: string,
    query: string,
    userContext: UserContext,
    previousResults: ToolResult[],
    reasoningSteps: ReasoningStep[]
  ): Promise<ExecutionResult> {
    const startTime = Date.now();
    console.log(`üéØ Action Executor: "${action}"`);

    try {
      // Action plan olu≈ütur
      const actionPlan = this.createActionPlan(action, query, userContext, previousResults);
      
      // Action'ƒ± execute et
      const results = await this.executeActionPlan(actionPlan, query, userContext);
      
      const executionTime = Date.now() - startTime;
      
      const executionResult: ExecutionResult = {
        success: results.length > 0 && results.some(r => r.confidence > 0.3),
        results,
        executionTime,
        fallbackUsed: actionPlan.actionType === 'fallback' || actionPlan.actionType === 'web_search'
      };

      console.log(`‚úÖ Action Executor tamamlandƒ±: ${executionTime}ms, ${results.length} sonu√ß`);
      return executionResult;

    } catch (error) {
      const executionTime = Date.now() - startTime;
      console.error(`‚ùå Action Executor hatasƒ±:`, error);
      
      return {
        success: false,
        results: [],
        error: error instanceof Error ? error.message : 'Bilinmeyen hata',
        executionTime,
        fallbackUsed: false
      };
    }
  }

  /**
   * Action plan olu≈ütur
   */
  private createActionPlan(
    action: string,
    query: string,
    userContext: UserContext,
    previousResults: ToolResult[]
  ): ActionPlan {
    const lowerAction = action.toLowerCase();
    
    // Python hatasƒ± tespit edildi, fallback tool'larƒ± kullan
    if (lowerAction.includes('python hatasƒ±') || lowerAction.includes('fallback')) {
      return {
        actionType: 'fallback',
        priority: 1,
        expectedResult: 'Fallback tool\'larƒ± ile sonu√ß bulma'
      };
    }
    
    // Sonu√ß bulunamadƒ±, web search fallback'i uygula
    if (lowerAction.includes('sonu√ß bulunamadƒ±') || lowerAction.includes('web search')) {
      return {
        actionType: 'web_search',
        priority: 2,
        expectedResult: 'Web aramasƒ± ile sonu√ß bulma'
      };
    }
    
    // Hastane aramasƒ± i√ßin location ve websearch tool'larƒ±nƒ± kullan
    if (lowerAction.includes('hastane') && lowerAction.includes('location')) {
      return {
        actionType: 'tool_execution',
        toolName: 'location',
        priority: 1,
        expectedResult: 'Hastane konum bilgisi'
      };
    }
    
    // ƒ∞lkyardƒ±m bilgisi i√ßin ilkyardim tool'unu kullan
    if (lowerAction.includes('ilkyardƒ±m')) {
      return {
        actionType: 'tool_execution',
        toolName: 'ilkyardim',
        priority: 1,
        expectedResult: 'ƒ∞lkyardƒ±m bilgisi'
      };
    }
    
    // Acil durum i√ßin emergency tool'unu kullan
    if (lowerAction.includes('acil durum')) {
      return {
        actionType: 'tool_execution',
        toolName: 'emergency',
        priority: 1,
        expectedResult: 'Acil durum bilgisi'
      };
    }
    
    // Konum bilgisi i√ßin location tool'unu kullan
    if (lowerAction.includes('konum')) {
      return {
        actionType: 'tool_execution',
        toolName: 'location',
        priority: 1,
        expectedResult: 'Konum bilgisi'
      };
    }
    
    // Genel bilgi i√ßin websearch tool'unu kullan
    return {
      actionType: 'tool_execution',
      toolName: 'websearch',
      priority: 3,
      expectedResult: 'Genel bilgi'
    };
  }

  /**
   * Action plan'ƒ± execute et
   */
  private async executeActionPlan(
    actionPlan: ActionPlan,
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    switch (actionPlan.actionType) {
      case 'tool_execution':
        return await this.executeTool(actionPlan.toolName!, query, userContext);
      
      case 'fallback':
        return await this.executeFallback(query, userContext);
      
      case 'web_search':
        return await this.executeWebSearch(query, userContext);
      
      case 'static_data':
        return await this.executeStaticData(query, userContext);
      
      default:
        throw new Error(`Bilinmeyen action type: ${actionPlan.actionType}`);
    }
  }

  /**
   * Tool execute et
   */
  private async executeTool(
    toolName: string,
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    const tool = this.toolRegistry.getTool(toolName);
    if (!tool) {
      console.warn(`‚ö†Ô∏è Tool bulunamadƒ±: ${toolName}`);
      return [];
    }

    try {
      const result = await tool.execute({ query, userContext });
      return result ? [result] : [];
    } catch (error) {
      console.error(`‚ùå Tool execution hatasƒ± (${toolName}):`, error);
      return [];
    }
  }

  /**
   * Fallback execute et
   */
  private async executeFallback(
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    console.log(`üîÑ Fallback execution: "${query}"`);
    
    const results: ToolResult[] = [];
    
    // WebSearchTool'u dene
    try {
      const webSearchTool = this.toolRegistry.getTool('websearch');
      if (webSearchTool) {
        const result = await webSearchTool.execute({ query, userContext });
        if (result) {
          results.push(result);
        }
      }
    } catch (error) {
      console.error('WebSearchTool fallback hatasƒ±:', error);
    }
    
    // Static data fallback
    if (results.length === 0) {
      const staticResult = await this.executeStaticData(query, userContext);
      results.push(...staticResult);
    }
    
    return results;
  }

  /**
   * Web search execute et
   */
  private async executeWebSearch(
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    console.log(`üîç Web search execution: "${query}"`);
    
    const webSearchTool = this.toolRegistry.getTool('websearch');
    if (!webSearchTool) {
      return [];
    }

    try {
      const result = await webSearchTool.execute({ query, userContext });
      return result ? [result] : [];
    } catch (error) {
      console.error('Web search execution hatasƒ±:', error);
      return [];
    }
  }

  /**
   * Static data execute et
   */
  private async executeStaticData(
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    console.log(`üìö Static data execution: "${query}"`);
    
    const lowerQuery = query.toLowerCase();
    
    // Hastane bilgisi
    if (lowerQuery.includes('hastane')) {
      return [{
        type: 'static_hospital',
        data: {
          query,
          results: [{
            title: 'Genel Hastane Bilgisi',
            content: 'Hastane bilgileri i√ßin l√ºtfen 112 Acil √áaƒürƒ± Merkezi\'ni arayƒ±n veya en yakƒ±n saƒülƒ±k kurulu≈üuna ba≈üvurun.',
            location: userContext.location?.district || 'Bilinmiyor',
            phone: '112'
          }],
          fallback: true
        },
        confidence: 0.4,
        timestamp: new Date(),
        source: 'static_data'
      }];
    }
    
    // ƒ∞lkyardƒ±m bilgisi
    if (lowerQuery.includes('ya≈üam √º√ßgeni') || lowerQuery.includes('ilkyardƒ±m')) {
      return [{
        type: 'static_first_aid',
        data: {
          query,
          results: [{
            title: 'Ya≈üam √ú√ßgeni - Deprem Anƒ±nda',
            content: `Deprem anƒ±nda ya≈üam √º√ßgeni olu≈üturmak i√ßin:
1. Saƒülam masa, sƒ±ra veya yatak yanƒ±na ge√ßin
2. √á√∂mel, kapan, tutun pozisyonu alƒ±n
3. Ba≈üƒ±nƒ±zƒ± ve boynunuzu koruyacak ≈üekilde kapanƒ±n
4. Pencerelerden, aƒüƒ±r e≈üyalardan uzak durun
5. Asans√∂r kullanmayƒ±n, merdivenlerden inmeyin
6. Dƒ±≈üarƒ± √ßƒ±kmaya √ßalƒ±≈ümayƒ±n, i√ßeride kalƒ±n`,
            category: 'deprem_g√ºvenlik'
          }],
          fallback: true
        },
        confidence: 0.8,
        timestamp: new Date(),
        source: 'static_data'
      }];
    }
    
    // Genel bilgi
    return [{
      type: 'static_general',
      data: {
        query,
        results: [{
          title: 'Genel Bilgi',
          content: `"${query}" konusunda detaylƒ± bilgi i√ßin l√ºtfen daha spesifik bir soru sorun veya 112 Acil √áaƒürƒ± Merkezi'ni arayƒ±n.`,
          fallback: true
        }],
        fallback: true
      },
      confidence: 0.3,
      timestamp: new Date(),
      source: 'static_data'
    }];
  }

  /**
   * Execution ge√ßmi≈üini temizle
   */
  clearHistory(userId: string): void {
    this.executionHistory.delete(userId);
  }

  /**
   * Execution ge√ßmi≈üini al
   */
  getHistory(userId: string): ExecutionResult[] {
    return this.executionHistory.get(userId) || [];
  }

  /**
   * Execution istatistikleri
   */
  getExecutionStats(): {
    totalExecutions: number;
    successfulExecutions: number;
    averageExecutionTime: number;
    fallbackUsage: number;
  } {
    const allResults = Array.from(this.executionHistory.values()).flat();
    
    return {
      totalExecutions: allResults.length,
      successfulExecutions: allResults.filter(r => r.success).length,
      averageExecutionTime: allResults.length > 0 
        ? allResults.reduce((sum, r) => sum + r.executionTime, 0) / allResults.length 
        : 0,
      fallbackUsage: allResults.filter(r => r.fallbackUsed).length
    };
  }
}
