import { UserContext, ToolResult, AgentResponse } from '../types.js';
import { ToolRegistry } from './ToolRegistry.js';
import { ReasoningEngine } from './ReasoningEngine.js';
import { ActionExecutor } from './ActionExecutor.js';

export class ToolOrchestrator {
  private toolRegistry: ToolRegistry;
  private reasoningEngine: ReasoningEngine;
  private actionExecutor: ActionExecutor;

  constructor(toolRegistry: ToolRegistry) {
    this.toolRegistry = toolRegistry;
    this.reasoningEngine = new ReasoningEngine();
    this.actionExecutor = new ActionExecutor(toolRegistry);
  }

  /**
   * Execute all registered tools in parallel
   */
  async executeTools(query: string, userContext: UserContext): Promise<ToolResult[]> {
    const results: ToolResult[] = [];
    const tools = this.toolRegistry.getAllTools();

    console.log(`üîß Executing ${tools.length} tools...`);

    // Execute all tools in parallel
    const toolPromises = tools.map(async (tool) => {
      try {
        const result = await tool.execute({ query, userContext });
        if (result) {
          console.log(`‚úÖ Tool ${tool.name} executed successfully`);
          return result;
        }
        return null;
      } catch (error) {
        console.error(`‚ùå Tool ${tool.name} error:`, error);
        return null;
      }
    });

    const toolResults = await Promise.all(toolPromises);
    const validResults = toolResults.filter(result => result !== null) as ToolResult[];

    console.log(`‚úÖ ${validResults.length}/${tools.length} tools succeeded`);
    return validResults;
  }

  /**
   * Execute tools using ReAct Pattern (Reasoning ‚Üí Action ‚Üí Observation)
   */
  async executeReActTools(query: string, userContext: UserContext): Promise<ToolResult[]> {
    console.log(`üß† ReAct Pattern ile tool execution ba≈ülatƒ±lƒ±yor: "${query}"`);
    
    // ƒ∞lk olarak smart tool selection ile ba≈üla
    const initialResults = await this.executeSmartTools(query, userContext);
    
    // ReAct Pattern uygula
    const reactResult = await this.reasoningEngine.executeReActPattern(
      query,
      userContext,
      initialResults
    );
    
    if (reactResult.success && reactResult.finalResult) {
      console.log(`‚úÖ ReAct Pattern ba≈üarƒ±lƒ±, sonu√ß bulundu`);
      return [reactResult.finalResult];
    }
    
    // ReAct Pattern ba≈üarƒ±sƒ±z olursa, fallback sonu√ßlarƒ± d√∂nd√ºr
    console.log(`‚ö†Ô∏è ReAct Pattern ba≈üarƒ±sƒ±z, fallback sonu√ßlarƒ± d√∂nd√ºr√ºl√ºyor`);
    return initialResults.length > 0 ? initialResults : await this.executeFallbackChain(query, userContext);
  }

  /**
   * Fallback chain execution
   */
  private async executeFallbackChain(query: string, userContext: UserContext): Promise<ToolResult[]> {
    console.log(`üîÑ Fallback chain ba≈ülatƒ±lƒ±yor: "${query}"`);
    
    const results: ToolResult[] = [];
    
    // 1. WebSearchTool fallback
    try {
      const webSearchTool = this.toolRegistry.getTool('websearch');
      if (webSearchTool) {
        const result = await webSearchTool.execute({ query, userContext });
        if (result) {
          results.push(result);
          console.log(`‚úÖ WebSearchTool fallback ba≈üarƒ±lƒ±`);
        }
      }
    } catch (error) {
      console.error('WebSearchTool fallback hatasƒ±:', error);
    }
    
    // 2. Static data fallback
    if (results.length === 0) {
      const staticResult = await this.actionExecutor.executeAction(
        'static_data',
        query,
        userContext,
        [],
        []
      );
      if (staticResult.success) {
        results.push(...staticResult.results);
        console.log(`‚úÖ Static data fallback ba≈üarƒ±lƒ±`);
      }
    }
    
    return results;
  }

  /**
   * Execute tools based on query analysis (smart tool selection)
   */
  async executeSmartTools(query: string, userContext: UserContext): Promise<ToolResult[]> {
    const queryLower = query.toLowerCase();
    const selectedTools: string[] = [];
    const allTools = this.toolRegistry.getAllTools();

    console.log(`üß† Smart tool selection for: "${query}"`);

    // Analyze query to determine which tools to use
    if (this.isHospitalQuery(queryLower)) {
      selectedTools.push('location', 'websearch');
      console.log(`üè• Hospital query detected - using location and websearch tools`);
    }
    
    if (this.isFirstAidQuery(queryLower)) {
      selectedTools.push('ilkyardim');
      console.log(`üè• First aid query detected - using ilkyardim tool`);
    }
    
    if (this.isEmergencyQuery(queryLower)) {
      selectedTools.push('emergency');
      console.log(`üö® Emergency query detected - using emergency tool`);
    }
    
    if (this.isLocationQuery(queryLower)) {
      selectedTools.push('location');
      console.log(`üìç Location query detected - using location tool`);
    }
    
    if (this.isPopulationQuery(queryLower)) {
      selectedTools.push('population_analysis');
      console.log(`üìä Population query detected - using population analysis tool`);
    }

    // Always include recommendation tool
    selectedTools.push('recommendation');

    // Remove duplicates
    const uniqueTools = Array.from(new Set(selectedTools));
    console.log(`üéØ Selected tools: ${uniqueTools.join(', ')}`);

    // Execute only selected tools
    const toolPromises = uniqueTools.map(async (toolName) => {
      const tool = this.toolRegistry.getTool(toolName);
      if (!tool) {
        console.warn(`‚ö†Ô∏è Tool not found: ${toolName}`);
        return null;
      }

      try {
        const result = await tool.execute({ query, userContext });
        if (result) {
          console.log(`‚úÖ Tool ${toolName} executed successfully`);
          return result;
        }
        return null;
      } catch (error) {
        console.error(`‚ùå Tool ${toolName} error:`, error);
        return null;
      }
    });

    const toolResults = await Promise.all(toolPromises);
    const validResults = toolResults.filter(result => result !== null) as ToolResult[];

    console.log(`‚úÖ ${validResults.length}/${uniqueTools.length} selected tools succeeded`);
    return validResults;
  }

  private isHospitalQuery(query: string): boolean {
    const hospitalKeywords = [
      'hastane', 'hastaneler', 'en yakƒ±n hastane', 'yakƒ±n hastane', 
      'hastane nerede', 'doktor', 'acil servis', 'tƒ±bbi', 'medikal'
    ];
    return hospitalKeywords.some(keyword => query.includes(keyword));
  }

  private isFirstAidQuery(query: string): boolean {
    const firstAidKeywords = [
      'ilkyardƒ±m', 'first aid', 'ya≈üam √º√ßgeni', 'life triangle',
      'kalp masajƒ±', 'cpr', 'kanama', 'kƒ±rƒ±k', 'yanƒ±k', 'bilin√ß kaybƒ±',
      'zehirlenme', 'yaralanma', 'nefes alma', 'ambulans', '112',
      'bayƒ±lma', 'aƒürƒ±', 'kan', 'yara', '≈üok', 'boƒüulma', 'burkulma',
      '√ßƒ±kƒ±k', 'donma', 'sƒ±cak √ßarpmasƒ±', 'hayvan ƒ±sƒ±rƒ±ƒüƒ±', 'deprem',
      'g√ºvenli alan', 'masa', 'sƒ±ra', 'korunma', 'protection'
    ];
    return firstAidKeywords.some(keyword => query.includes(keyword));
  }

  private isEmergencyQuery(query: string): boolean {
    const emergencyKeywords = [
      'acil', 'emergency', 'tehlike', 'g√ºvenlik', '112', 'ambulans',
      'itfaiye', 'polis', 'kurtarma', 'afet', 'deprem', 'yangƒ±n', 'sel'
    ];
    return emergencyKeywords.some(keyword => query.includes(keyword));
  }

  private isLocationQuery(query: string): boolean {
    const locationKeywords = [
      'konum', 'nerede', 'g√ºvenli alan', 'toplanma', 'toplanma alanƒ±',
      'yol tarifi', 'nasƒ±l giderim', 'yakƒ±n', 'mesafe', 'en yakƒ±n',
      'koordinat', 'park', 'meydan', 'mahalle', 'il√ße', 'b√∂lge'
    ];
    return locationKeywords.some(keyword => query.includes(keyword));
  }

  private isPopulationQuery(query: string): boolean {
    const populationKeywords = [
      'n√ºfus', 'demografi', 'ya≈ü daƒüƒ±lƒ±mƒ±', 'n√ºfus yoƒüunluƒüu',
      'gen√ß n√ºfus', 'ya≈ülƒ± n√ºfus', 'cinsiyet daƒüƒ±lƒ±mƒ±', 'istatistik'
    ];
    return populationKeywords.some(keyword => query.includes(keyword));
  }

  /**
   * Execute specific tools by name
   */
  async executeSpecificTools(
    toolNames: string[],
    query: string,
    userContext: UserContext
  ): Promise<ToolResult[]> {
    const results: ToolResult[] = [];

    for (const toolName of toolNames) {
      const tool = this.toolRegistry.getTool(toolName);
      if (!tool) {
        console.warn(`‚ö†Ô∏è Tool not found: ${toolName}`);
        continue;
      }

      try {
        const result = await tool.execute({ query, userContext });
        if (result) {
          results.push(result);
          console.log(`‚úÖ Tool ${toolName} executed successfully`);
        }
      } catch (error) {
        console.error(`‚ùå Tool ${toolName} error:`, error);
      }
    }

    return results;
  }

  /**
   * Execute agents dynamically with Multi-Agent Pattern
   */
  async executeAgents(
    selectedAgents: string[],
    query: string,
    userContext: UserContext,
    toolResults: ToolResult[]
  ): Promise<AgentResponse[]> {
    // √ñnce CoordinatorAgent'ƒ± kullan
    const { CoordinatorAgent } = await import('../specialized/CoordinatorAgent.js');
    const coordinatorAgent = new CoordinatorAgent();
    
    const coordinatedResponse = await coordinatorAgent.execute(query, userContext, toolResults);
    
    // Coordinator'dan gelen response'u d√∂nd√ºr
    return [coordinatedResponse];
  }

  /**
   * Execute legacy agents (fallback)
   */
  async executeLegacyAgents(
    selectedAgents: string[],
    query: string,
    userContext: UserContext,
    toolResults: ToolResult[]
  ): Promise<AgentResponse[]> {
    const agentMap = {
      'info': () => import('../supervisor/infoAgent.js').then(m => new m.InfoAgent()),
      'action': () => import('../supervisor/actionAgent.js').then(m => new m.ActionAgent()),
      'report': () => import('../supervisor/reportAgent.js').then(m => new m.ReportAgent()),
      'emergency': () => import('../supervisor/emergencyAgent.js').then(m => new m.EmergencyAgent())
    };

    const agentPromises = selectedAgents.map(async (agentName) => {
      try {
        const AgentClass = await agentMap[agentName as keyof typeof agentMap]();
        const response = await AgentClass.execute(query, userContext, toolResults);
        console.log(`üé≠ Agent ${agentName} executed successfully`);
        return response;
      } catch (error) {
        console.error(`‚ùå Agent ${agentName} error:`, error);
        return null;
      }
    });

    const agentResponses = await Promise.all(agentPromises);
    return agentResponses.filter(response => response !== null) as AgentResponse[];
  }

  /**
   * Get tool execution statistics
   */
  getExecutionStats(toolResults: ToolResult[]): {
    totalTools: number;
    successfulTools: number;
    averageConfidence: number;
    toolTypes: string[];
  } {
    const totalTools = this.toolRegistry.getToolCount();
    const successfulTools = toolResults.length;
    const averageConfidence = toolResults.length > 0
      ? toolResults.reduce((sum, result) => sum + result.confidence, 0) / toolResults.length
      : 0;
    const toolTypes = toolResults.map(result => result.type);

    return {
      totalTools,
      successfulTools,
      averageConfidence: Math.round(averageConfidence * 100) / 100,
      toolTypes
    };
  }
}

